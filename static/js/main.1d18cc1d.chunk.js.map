{"version":3,"sources":["atom/atom.tsx","component/EditCard.tsx","component/Card.tsx","component/EditTitle.tsx","component/Menu.tsx","component/AddCard.tsx","component/List.tsx","component/AddList.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ListState","atom","key","default","TaskState","TaskNumber","EditCard","content","DeleteCard","ChangeEdit","ChangeHidden","Save","id","useState","text","setText","className","type","value","onChange","e","target","autoFocus","onClick","Card","card","cardindex","hidden","setHidden","edit","setEdit","toggleContainer","useRef","useEffect","window","addEventListener","onClickOutsideHandler","removeEventListener","Carded","current","contains","onPen","ref","draggableId","String","index","provided","innerRef","draggableProps","dragHandleProps","onMouseEnter","onMouseLeave","Modal","ChangeModal","title","listindex","ChangeTitle","ChangeMenu","stopPropagation","Menu","setList","useSetRecoilState","open","setOpen","myindex","prevState","newlist","filter","i","console","log","Addcard","ChangeAdd","AddCard","placeholder","List","list","tasks","useRecoilState","tasked","setTask","listed","number","setNumber","add","setAdd","alert","task","JSON","parse","stringify","push","newtaskIds","newtask","findIndex","droppableId","droppableProps","map","AddList","ChangeOpen","setTitle","App","onDragEnd","result","destination","source","splice","startlist","finishlist","newTaskIds","startTaskIds","finishTaskIds","direction","item","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1d18cc1d.chunk.js","sourcesContent":["import { atom } from 'recoil';\r\nexport type ListStated = {\r\n    title: string\r\n    tasks: number[]\r\n}\r\nconst initListState: ListStated[] = [\r\n\r\n]\r\nexport const ListState = atom({\r\n    key: \"liststate\",\r\n    default: initListState\r\n})\r\n\r\nexport type TaskStated = {\r\n    id: number\r\n    content: string\r\n}\r\nconst inittaskState: TaskStated[] = [\r\n\r\n]\r\nexport const TaskState = atom({\r\n    key: \"taskstate\",\r\n    default: inittaskState\r\n})\r\n\r\nexport const TaskNumber = atom({\r\n    key: \"tasknumber\",\r\n    default: 0\r\n})\r\n\r\n","import React, { useRef, useState } from \"react\";\r\nimport \"../style/EditCard.css\"\r\nimport { StringDecoder } from \"string_decoder\";\r\n\r\ntype Props={\r\n    content:string\r\n    ChangeEdit:()=>void\r\n    ChangeHidden:()=>void\r\n    DeleteCard:(index:number)=>void\r\n    Save:(index:number,content:string)=>void\r\n    id:number\r\n}\r\nconst EditCard: React.FC<Props> = ({content,ChangeEdit,ChangeHidden,DeleteCard,Save,id}) => {\r\n    const [text,setText]=useState(content)\r\n\r\n    const Input=(e:any)=>{\r\n        setText(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className=\"edit-card\">\r\n            <input type=\"text\" value={text} onChange={Input} autoFocus={true} />\r\n            <div className=\"text\">\r\n                <p className=\"save\" onClick={()=>Save(id,text)}>保存</p>\r\n                <p className=\"delete\" onClick={()=>DeleteCard(id)}>削除</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EditCard","import React, { useRef, useState, useEffect } from \"react\";\r\nimport { TaskStated } from \"../atom/atom\"\r\nimport { Draggable,Droppable } from 'react-beautiful-dnd';\r\nimport EditCard from \"./EditCard\"\r\nimport \"../style/Card.css\"\r\n\r\ntype Props = {\r\n    card: TaskStated\r\n    id: number\r\n    cardindex: number\r\n    DeleteCard: (index: number) => void\r\n    Save: (index: number, content: string) => void\r\n}\r\n\r\nconst Card: React.FC<Props> = ({ card, id, cardindex, DeleteCard, Save }) => {\r\n    const [hidden, setHidden] = useState(false)\r\n    const [edit, setEdit] = useState(false)\r\n    const toggleContainer = useRef<HTMLInputElement>(null) as React.MutableRefObject<HTMLInputElement>\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('click', onClickOutsideHandler);\r\n        return () => {\r\n            window.removeEventListener('click', onClickOutsideHandler);\r\n        }\r\n    })\r\n\r\n    const onClickOutsideHandler = (e: any) => {\r\n        if (edit && !toggleContainer.current.contains(e.target)) {\r\n            setEdit(!edit)\r\n        }\r\n    }\r\n\r\n    const ChangeEdit = () => {\r\n        setEdit(!edit)\r\n    }\r\n\r\n    const ChangeHidden = () => {\r\n        setHidden(!hidden)\r\n    }\r\n\r\n    const onPen = () => {\r\n        ChangeEdit()\r\n        setHidden(false)\r\n    }\r\n\r\n    const onSave = (id: number, text: string) => {\r\n        Save(id, text)\r\n        window.removeEventListener('click', onClickOutsideHandler);\r\n        ChangeEdit()\r\n    }\r\n\r\n    let Carded\r\n    if (edit) {\r\n        Carded =\r\n            <div ref={toggleContainer}>\r\n                <EditCard content={card.content} ChangeEdit={ChangeEdit} ChangeHidden={ChangeHidden} DeleteCard={DeleteCard} Save={onSave} id={id} />\r\n            </div>\r\n\r\n    } else {\r\n        Carded =\r\n            <Draggable draggableId={String(id)} index={cardindex} >\r\n                {provided => (\r\n                    <div\r\n                        ref={provided.innerRef}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                    >\r\n                        <div className=\"card\"\r\n                            onMouseEnter={() => setHidden(true)}\r\n                            onMouseLeave={() => setHidden(false)}\r\n                        >\r\n                            {card.content}\r\n                            {hidden &&\r\n                                <div className=\"pen\" >\r\n                                    <i className=\"fas fa-pen\" onClick={onPen}></i>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </Draggable>\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {Carded}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Card","import React, { useRef, useState } from \"react\";\r\nimport { ListState } from \"../atom/atom\"\r\nimport \"../style/EditTitle.css\"\r\ntype Props={\r\n    ChangeModal:()=>void\r\n    ChangeTitle:(text:string,index:number)=>void\r\n    ChangeMenu:()=>void\r\n    title:string\r\n    listindex:number\r\n}\r\nconst Modal:React.FC<Props> = ({ChangeModal,title,listindex,ChangeTitle,ChangeMenu}) => {\r\n    const [text,setText]=useState(title)\r\n\r\n    const Back=(e:any)=>{\r\n        e.stopPropagation();\r\n    }\r\n\r\n    const Input=(e:any)=>{\r\n        setText(e.target.value)\r\n    }\r\n    const Save=()=>{\r\n        ChangeTitle(text,listindex)\r\n        ChangeModal()\r\n        ChangeMenu()\r\n    }\r\n\r\n    return (\r\n        <div className=\"background\" onClick={()=>ChangeModal()}>\r\n            <div className=\"modal\" onClick={Back}>\r\n                <p>新しいタイトル</p>\r\n                <input type=\"text\" value={text} onChange={Input} autoFocus={true}></input>\r\n                <button onClick={Save}>保存</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Modal","import React, { useRef, useState } from \"react\";\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport { ListState } from \"../atom/atom\"\r\nimport EditTitle from \"./EditTitle\"\r\nimport \"../style/Menu.css\"\r\n\r\ntype Props = {\r\n    index: number\r\n    title: string\r\n    ChangeTitle:(text:string,index:number)=>void\r\n    ChangeMenu:()=>void\r\n}\r\nconst Menu: React.FC<Props> = ({ index, title,ChangeTitle,ChangeMenu }) => {\r\n    const setList = useSetRecoilState(ListState)\r\n    const [open, setOpen] = useState(false)\r\n\r\n    const RemoveList = (myindex: number) => {\r\n        setList(prevState => {\r\n            const newlist = prevState.filter((i, index) => index !== myindex)\r\n            return [...newlist]\r\n        })\r\n    }\r\n\r\n    const ChangeModal=()=>{\r\n        setOpen(!open)\r\n        console.log(\"閉じる\")\r\n    }\r\n    return (\r\n        <>\r\n            <div className=\"menus\">\r\n                <div className=\"change\" onClick={() => setOpen(!open)}>\r\n                    <i className=\"fas fa-pen\"></i>\r\n                    <p>タイトルを変更</p>\r\n                </div>\r\n                <div className=\"remove\" onClick={() => RemoveList(index)}>\r\n                    <i className=\"fas fa-trash\"></i>\r\n                    <p>リストを削除</p>\r\n                </div>\r\n            </div>\r\n            {open && <EditTitle listindex={index} ChangeModal={ChangeModal} title={title} ChangeTitle={ChangeTitle} ChangeMenu={ChangeMenu}/>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Menu","import React, {useState } from \"react\";\r\nimport \"../style/AddCard.css\"\r\n\r\ntype Props={\r\n    ChangeAdd:()=>void\r\n    AddCard:(text:string)=>void\r\n}\r\nconst Addcard: React.FC<Props> = ({ChangeAdd,AddCard}) => {\r\n    const [text,setText]=useState(\"\")\r\n\r\n    const Input=(e:any)=>{\r\n        setText(e.target.value)\r\n    }\r\n\r\n    return (\r\n        <div className=\"card-add\">\r\n            <input type=\"text\" autoFocus={true} value={text} onChange={Input} placeholder=\"入力できます\"/>\r\n            <div className=\"text\">\r\n                <p onClick={()=>AddCard(text)}>追加</p>\r\n                <p onClick={()=>ChangeAdd()}>キャンセル</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Addcard","import React, { useRef, useState, useEffect, useCallback } from \"react\";\r\nimport Card from \"./Card\"\r\nimport Menu from \"./Menu\"\r\nimport Addcard from \"./AddCard\"\r\nimport { ListStated, TaskStated, TaskState, ListState, TaskNumber } from \"../atom/atom\"\r\nimport { useRecoilState } from \"recoil\";\r\nimport \"../style/List.css\"\r\nimport { Droppable, DragDropContext, Draggable } from 'react-beautiful-dnd';\r\n\r\ntype List = {\r\n    list: ListStated\r\n    listindex: number\r\n    tasks: TaskStated[]\r\n}\r\n\r\nconst List: React.FC<List> = ({ list, listindex, tasks }) => {\r\n    const [tasked, setTask] = useRecoilState(TaskState)\r\n    const [listed, setList] = useRecoilState(ListState)\r\n    const [number, setNumber] = useRecoilState(TaskNumber)\r\n    const [open, setOpen] = useState(false)\r\n    const [add, setAdd] = useState(false)\r\n    const toggleContainer = useRef<HTMLInputElement>(null) as React.MutableRefObject<HTMLInputElement>\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('click', onClickOutsideHandler);\r\n        return () => {\r\n            window.removeEventListener('click', onClickOutsideHandler);\r\n        }\r\n    })\r\n\r\n    const onClickOutsideHandler = (e: any) => {\r\n        if (open && !toggleContainer.current.contains(e.target)) {\r\n            setOpen(false)\r\n        }\r\n    }\r\n\r\n    const ChangeAdd = () => {\r\n        setAdd(!add)\r\n    }\r\n\r\n    const AddCard = (text: string) => {\r\n        if (text === \"\") {\r\n            alert(\"空白です\")\r\n        } else {\r\n            const task = { id: number, content: text }\r\n            const list = JSON.parse(JSON.stringify(listed))\r\n            list[listindex].tasks.push(number)\r\n            setList(list)\r\n            setTask(prevState => [...prevState, task])\r\n            setNumber(number+1)\r\n            setAdd(!add)\r\n        }\r\n    }\r\n\r\n    const DeleteCard = (id: number) => {\r\n        const list = JSON.parse(JSON.stringify(listed))\r\n        const newtaskIds=list[listindex].tasks.filter((i:number) => i !== id)\r\n        list[listindex].tasks=newtaskIds\r\n        setList(list)\r\n        \r\n        const task=JSON.parse(JSON.stringify(tasked))\r\n        const newtask=task.filter((i:{id:number,content:string}) => i.id !== id)\r\n        setTask(newtask)\r\n\r\n    }\r\n\r\n    const Save = (id: number, text: string) => {\r\n        const task = JSON.parse(JSON.stringify(tasked))\r\n        const index = tasked.findIndex(i => i.id === id)\r\n        task[index].content = text\r\n        setTask(task)\r\n    }\r\n\r\n    const ChangeTitle = (text: string,index:number) => {\r\n        const list = JSON.parse(JSON.stringify(listed))\r\n        list[index].title=text\r\n        setList(list)\r\n    }\r\n\r\n    const ChangeMenu=()=>{\r\n        setOpen(!open)\r\n    }\r\n\r\n    return (\r\n        <Draggable draggableId={\"list\"+listindex} index={listindex}>\r\n            {provided => (\r\n                <div\r\n                    ref={provided.innerRef}\r\n                    {...provided.draggableProps}\r\n                    className=\"list\"\r\n                >\r\n                    <div\r\n                        {...provided.dragHandleProps}\r\n                        className=\"title\"\r\n                    >\r\n                        <h3>{list.title}</h3>\r\n                        <div className=\"menu\" ref={toggleContainer}>\r\n                            <div className=\"button\" onClick={ChangeMenu}>\r\n                                <i className=\"fas fa-ellipsis-h\" ></i>\r\n                            </div>\r\n                            {open && (\r\n                                <div className=\"menu-list\" >\r\n                                    <Menu index={listindex} title={list.title} ChangeTitle={ChangeTitle} ChangeMenu={ChangeMenu} />\r\n                                </div>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                    <Droppable droppableId={String(listindex)} type=\"task\">\r\n                        {provided => (\r\n                            <div\r\n                                ref={provided.innerRef}\r\n                                {...provided.droppableProps}\r\n                                className=\"card-list\"\r\n                            >\r\n                                {tasks.map((card, index) => {\r\n                                    return (\r\n                                        <Card\r\n                                            card={card}\r\n                                            id={card.id}\r\n                                            cardindex={index}\r\n                                            key={card.id}\r\n                                            DeleteCard={DeleteCard}\r\n                                            Save={Save}\r\n                                        />\r\n                                    )\r\n                                })}\r\n                                {provided.placeholder}\r\n                            </div>\r\n                        )}\r\n                    </Droppable>\r\n                    {add && <Addcard ChangeAdd={ChangeAdd} AddCard={AddCard} />}\r\n                    {!add &&\r\n                        <div className=\"add-card\" onClick={ChangeAdd}>\r\n                            カードを追加\r\n                 </div>\r\n                    }\r\n                </div>\r\n            )}\r\n        </Draggable>\r\n    )\r\n}\r\n\r\nexport default List","import React, { useState, useRef, useEffect } from 'react';\r\nimport { useRecoilState } from \"recoil\";\r\nimport { ListState } from \"../atom/atom\"\r\nimport \"../style/AddList.css\"\r\n\r\ntype Props = {\r\n    ChangeOpen: () => void\r\n    open: boolean\r\n}\r\n\r\nconst AddList: React.FC<Props> = ({ ChangeOpen, open }) => {\r\n    const [list, setList] = useRecoilState(ListState)\r\n    const [title, setTitle] = useState<string>(\"\")\r\n    const toggleContainer = useRef<HTMLInputElement>(null) as React.MutableRefObject<HTMLInputElement>\r\n\r\n    useEffect(() => {\r\n        window.addEventListener('click', onClickOutsideHandler);\r\n        return () => {\r\n            window.removeEventListener('click', onClickOutsideHandler);\r\n        }\r\n    })\r\n\r\n    const onClickOutsideHandler = (e: any) => {\r\n        if (open && !toggleContainer.current.contains(e.target)) {\r\n            ChangeOpen()\r\n        }\r\n    }\r\n\r\n    const onChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.target.value)\r\n    }\r\n\r\n    const AddList = () => {\r\n        if (title === \"\") {\r\n            alert(\"リスト名が空白です\")\r\n        } else {\r\n            setList(prevState => [...prevState, { title, tasks: [] }])\r\n            ChangeOpen()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"add-list\" ref={toggleContainer}>\r\n            <input type=\"text\" value={title} onChange={onChange} placeholder=\"リスト名\" />\r\n            <div className=\"button\">\r\n                <button onClick={AddList}>追加</button>\r\n                <i className=\"fas fa-2x fa-times\" onClick={() => ChangeOpen()}></i>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AddList","import React, { useState } from 'react';\nimport { useRecoilState } from \"recoil\";\nimport { ListState, ListStated, TaskState,TaskStated } from \"./atom/atom\"\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport List from \"./component/List\"\nimport AddList from \"./component/AddList\"\nimport './App.css';\nimport { findByTestId } from '@testing-library/react';\n\n\nconst App: React.FC = () => {\n  const [list, setList] = useRecoilState(ListState)\n  const [task, setTask] = useRecoilState(TaskState)\n  const [open, setOpen] = useState(false)\n\n  const ChangeOpen = () => {\n    setOpen(!open)\n  }\n\n\n  const onDragEnd = (result: any) => {\n    //source.indexは持っているカードのindex\n    //source.droppableIdは移動元のリストのindex\n    //destination.droppableId移動先のリストのindex\n    //destination.indexは移動先のカードのindex\n    const { destination, source, draggableId,type } = result;\n    const List = JSON.parse(JSON.stringify(list))\n\n    if (!destination) {\n      return\n    }\n\n    if (destination.droppableId === source.droppableId && destination.index === source.index) {\n      return\n    }\n\n    if(type===\"column\"){\n      const newlist=List.filter((i:any,index:number)=>index!==source.index)\n      newlist.splice(destination.index,0,List[source.index])\n      setList(newlist)\n      return\n    }\n\n    const startlist = List[source.droppableId]\n    const finishlist = List[destination.droppableId]\n\n    if (startlist === finishlist) {\n      const newTaskIds = startlist.tasks.filter((i: any, index: number) => index !== source.index)\n      newTaskIds.splice(destination.index, 0, startlist.tasks[source.index])\n\n      List[source.droppableId].tasks = newTaskIds\n      setList(List)\n    } else {\n      const startTaskIds = startlist.tasks.filter((i: any, index: number) => index !== source.index)\n\n      const finishTaskIds = finishlist.tasks\n      finishTaskIds.splice(destination.index, 0, startlist.tasks[source.index])\n\n      List[source.droppableId].tasks = startTaskIds\n      List[destination.droppableId].tasks = finishTaskIds\n      setList(List)\n    }\n  }\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <Droppable\n        droppableId=\"all-list\"\n        direction=\"horizontal\"\n        type=\"column\"\n      >\n        {provided => (\n          <div\n            ref={provided.innerRef}\n            //{...provided.droppableProps}\n            className=\"app\"\n          >\n            {list.map((item: ListStated, index: number) => {\n              //const tasks = task.filter(i => item.tasks.includes(i.id))\n              //const tasks = item.tasks.map(taskId => task[taskId])\n              const tasks:TaskStated[]=[]\n              \n              item.tasks.map(id=>{\n                return(\n                  task.map(tasked=>{\n                    if(id===tasked.id){\n                      tasks.push(tasked)\n                    }\n                  })\n                )\n              })\n              return <List list={item} listindex={index} key={index} tasks={tasks} />\n            })}\n            {provided.placeholder}\n            {!open &&\n              <div className=\"add\" onClick={ChangeOpen}>\n                <i className=\"fas fa-plus\"></i>リストを追加\n              </div>}\n            {open && <AddList ChangeOpen={ChangeOpen} open={open} />}\n          </div>\n        )}\n      </Droppable>\n    </DragDropContext>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { RecoilRoot } from 'recoil';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RecoilRoot>\n        <App />\n    </RecoilRoot>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}